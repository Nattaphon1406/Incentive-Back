/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./app/app.js":
/*!********************!*\
  !*** ./app/app.js ***!
  \********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var __dirname = \"app\";\nvar createError = __webpack_require__(/*! http-errors */ \"http-errors\");\r\nvar express = __webpack_require__(/*! express */ \"express\");\r\nvar path = __webpack_require__(/*! path */ \"path\");\r\nvar cookieParser = __webpack_require__(/*! cookie-parser */ \"cookie-parser\");\r\nconst cors = __webpack_require__(/*! cors */ \"cors\");\r\nconst bodyParser = __webpack_require__(/*! body-parser */ \"body-parser\");\r\nvar morgan = __webpack_require__(/*! morgan */ \"morgan\");\r\nvar fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst rfs = __webpack_require__(/*! rotating-file-stream */ \"rotating-file-stream\");\r\n\r\nconst basicAuth = __webpack_require__(/*! express-basic-auth */ \"express-basic-auth\");\r\nvar permissionRouter = __webpack_require__(/*! ./routes/permission */ \"./app/routes/permission.js\");\r\n\r\n/* const fileupload = require(\"express-fileupload\"); */\r\nconst _config = __webpack_require__(/*! ./appSetting.js */ \"./app/appSetting.js\");\r\nconst databaseConnect = __webpack_require__(/*! ./dbconnect.js */ \"./app/dbconnect.js\");\r\n/**\r\n * Import routes\r\n */\r\nvar indexRouter = __webpack_require__(/*! ./routes/index */ \"./app/routes/index.js\");\r\n\r\nvar uploadRouter = __webpack_require__(/*! ./routes/upload */ \"./app/routes/upload.js\");\r\nvar systemMgtRouter = __webpack_require__(/*! ./routes/system_mgt */ \"./app/routes/system_mgt.js\");\r\nvar app = express();\r\n/**\r\n * Swagger generate route\r\n */\r\nconst swaggerUi = __webpack_require__(/*! swagger-ui-express */ \"swagger-ui-express\");\r\n\r\nconst swaggerDocument = __webpack_require__(/*! ./swagger.json */ \"./app/swagger.json\");\r\nswaggerDocument.host = _config.host + \":\" + _config.port;\r\n\r\napp.use(\r\n  \"/api-docs\",\r\n  basicAuth({\r\n    users: { TTT: _config.passwordSwagger },\r\n    challenge: true,\r\n  }),\r\n  swaggerUi.serve,\r\n  swaggerUi.setup(swaggerDocument)\r\n);\r\n\r\n/**\r\n * \r\n * Log Control\r\n */\r\n\r\n function log_file_name(time, index) {\r\n  if (!time) return \"access.log\";\r\n\r\n  return [formatDate(time), index, \"access.log\"].join(\"-\");\r\n}\r\n\r\nif (app.get(\"env\") == \"production\") {\r\n  let accessLogStream = rfs.createStream(log_file_name, {\r\n    size: \"2M\",\r\n    interval: \"1d\",\r\n    path: _config.logAccessPath,\r\n  });\r\n  app.use(morgan({ stream: accessLogStream }));\r\n} else {\r\n  app.use(morgan('dev')); //log to console on development\r\n}\r\n/** \r\n * view engine setup\r\n */\r\napp.set(\"views\", path.join(__dirname, \"views\"));\r\napp.set(\"view engine\", \"pug\");\r\n\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(express.static(path.join(__dirname, \"public\")));\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\n\r\n/** \r\n * Router\r\n */\r\n// enable files upload\r\nvar fileUpload = __webpack_require__(/*! express-fileupload */ \"express-fileupload\");\r\napp.use(\r\n  fileUpload({\r\n    createParentPath: true,\r\n  })\r\n);\r\n\r\napp.use(\"/\", indexRouter);\r\napp.use(\"/permission\", permissionRouter);\r\n\r\napp.use(\"/api/upload\",uploadRouter);\r\napp.use(\"/api/systemMgt\",systemMgtRouter);\r\n\r\n/** \r\n * Eerror\r\n */\r\napp.use(function (req, res, next) {\r\n  next(createError(404));\r\n});\r\n\r\napp.use(function (err, req, res, next) {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get(\"env\") === \"development\" ? err : {};\r\n\r\n  // render the error page\r\n  res.status(err.status || 500);\r\n  res.render(\"error\");\r\n});\r\n\r\napp.disable(\"x-powered-by\");\r\n\r\nmodule.exports = app;\r\n\n\n//# sourceURL=webpack://track-tire-backend/./app/app.js?");

/***/ }),

/***/ "./app/appSetting.js":
/*!***************************!*\
  !*** ./app/appSetting.js ***!
  \***************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const config = __webpack_require__(/*! ./appSettingSite.js */ \"./app/appSettingSite.js\");\r\nvar _config ={\r\n    development:{\r\n    \r\n    \"dbConnect\":{\r\n        \"user\":config.DB_USERNAME_DEV,\r\n        \"host\": config.DB_SERVER_DEV,\r\n        \"database\": config.DB_NAME_DEV,\r\n        \"password\": config.DB_PASSWORD_DEV,\r\n        \"port\":config.DB_PORT_DEV,\r\n        \"max\": 10,\r\n        \"idleTimeoutMillis\": 30000,\r\n        \"connectionTimeoutMillis\": 5000,\r\n    },\r\n    \"dbLogConnect\":{\r\n        \"user\":config.LOG_DB_USERNAME_DEV,\r\n        \"host\": config.LOG_DB_SERVER_DEV,\r\n        \"database\": config.LOG_DB_NAME_DEV,\r\n        \"password\": config.LOG_DB_PASSWORD_DEV,\r\n        \"port\":config.LOG_DB_PORT_DEV,\r\n        \"max\": 10,\r\n        \"idleTimeoutMillis\": 30000,\r\n        \"connectionTimeoutMillis\": 5000\r\n    }\r\n} ,\r\ntest:{\r\n    \r\n    \"dbConnect\":{\r\n        \"user\":config.DB_USERNAME_TEST,\r\n        \"host\": config.DB_SERVER_TEST,\r\n        \"database\": config.DB_NAME_TEST,\r\n        \"password\": config.DB_PASSWORD_TEST,\r\n        \"port\":config.DB_PORT_TEST,\r\n        \"max\": 10,\r\n        \"idleTimeoutMillis\": 30000,\r\n        \"connectionTimeoutMillis\": 5000,\r\n    },\r\n    \"dbLogConnect\":{\r\n        \"user\":config.LOG_DB_USERNAME_TEST,\r\n        \"host\": config.LOG_DB_SERVER_TEST,\r\n        \"database\": config.LOG_DB_NAME_TEST,\r\n        \"password\": config.LOG_DB_PASSWORD_TEST,\r\n        \"port\":config.LOG_DB_PORT_TEST,\r\n        \"max\": 10,\r\n        \"idleTimeoutMillis\": 30000,\r\n        \"connectionTimeoutMillis\": 5000\r\n    }\r\n} ,\r\n \r\n\r\n}\r\n\r\nmodule.exports ={\r\n    \"dbConnect\":_config[config.START_PROJECT],\r\n   \"host\":config.HOST,\r\n   \"port\":config.PORT,\r\n   \"jwtSecret\":config.JWTSECRET,\r\n   \"customHeaderKey\":config.CUSTOMHERDERKEY,\r\n   \"userSwagger\":config.USERSWAGGER,\r\n   \"passwordSwagger\":config.PASSWORDSWAGGER,\r\n   \"fixData\":{\r\n       \"material_unit\":{\r\n           \"Piece\":config.FIXDATA_MATERIAL_UNIT_PIECE,\r\n           \"Weight\":config.FIXDATA_MATERIAL_UNIT_WEIGHT\r\n       }\r\n   },\r\n   \"logAccessPath\":config.LOGACCESSPATH\r\n   ,\r\n   \"passwordAcademy\":config.PASSWORDACADEMY\r\n\r\n\r\n    }\n\n//# sourceURL=webpack://track-tire-backend/./app/appSetting.js?");

/***/ }),

/***/ "./app/appSettingSite.js":
/*!*******************************!*\
  !*** ./app/appSettingSite.js ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("(__webpack_require__(/*! dotenv */ \"dotenv\").config)({ path:process.cwd()+ '/.env' })\r\n\r\nmodule.exports ={\r\n \r\nSTART_PROJECT:process.env.START_PROJECT,\r\n\r\n\r\nDB_SERVER_DEV:process.env.DB_SERVER_DEV,\r\nDB_USERNAME_DEV:process.env.DB_USERNAME_DEV,\r\nDB_PASSWORD_DEV:process.env.DB_PASSWORD_DEV,\r\nDB_NAME_DEV:process.env.DB_NAME_DEV,\r\nDB_PORT_DEV:process.env.DB_PORT_DEV,\r\nLOG_DB_SERVER_DEV:process.env.LOG_DB_SERVER_DEV,\r\nLOG_DB_USERNAME_DEV:process.env.LOG_DB_USERNAME_DEV,\r\nLOG_DB_PASSWORD_DEV:process.env.LOG_DB_PASSWORD_DEV,\r\nLOG_DB_NAME_DEV:process.env.LOG_DB_NAME_DEV,\r\nLOG_DB_PORT_DEV:process.env.LOG_DB_PORT_DEV,\r\n\r\n\r\nDB_SERVER_DEV_VEHICLE:process.env.DB_SERVER_DEV_VEHICLE,\r\nDB_USERNAME_DEV_VEHICLE:process.env.DB_USERNAME_DEV_VEHICLE,\r\nDB_PASSWORD_DEV_VEHICLE:process.env.DB_PASSWORD_DEV_VEHICLE,\r\nDB_NAME_DEV_VEHICLE:process.env.DB_NAME_DEV_VEHICLE,\r\nDB_PORT_DEV_VEHICLE:process.env.DB_PORT_DEV_VEHICLE,\r\nLOG_DB_SERVER_DEV_VEHICLE:process.env.LOG_DB_SERVER_DEV_VEHICLE,\r\nLOG_DB_USERNAME_DEV_VEHICLE:process.env.LOG_DB_USERNAME_DEV_VEHICLE,\r\nLOG_DB_PASSWORD_DEV_VEHICLE:process.env.LOG_DB_PASSWORD_DEV_VEHICLE,\r\nLOG_DB_NAME_DEV_VEHICLE:process.env.LOG_DB_NAME_DEV_VEHICLE,\r\nLOG_DB_PORT_DEV_VEHICLE:process.env.LOG_DB_PORT_DEV_VEHICLE,\r\n\r\nDB_SERVER_TEST:process.env.DB_SERVER_TEST,\r\nDB_USERNAME_TEST:process.env.DB_USERNAME_TEST,\r\nDB_PASSWORD_TEST:process.env.DB_PASSWORD_TEST,\r\nDB_NAME_TEST:process.env.DB_NAME_TEST,\r\nDB_PORT_TEST:process.env.DB_PORT_TEST,\r\n\r\nLOG_DB_SERVER_TEST:process.env.LOG_DB_SERVER_TEST,\r\nLOG_DB_USERNAME_TEST:process.env.LOG_DB_USERNAME_TEST,\r\nLOG_DB_PASSWORD_TEST:process.env.LOG_DB_PASSWORD_TEST,\r\nLOG_DB_NAME_TEST:process.env.LOG_DB_NAME_TEST,\r\nLOG_DB_PORT_TEST:process.env.LOG_DB_PORT_TEST,\r\n\r\n\r\nHOST:process.env.HOST,\r\nPORT:process.env.PORT,\r\nJWTSECRET:process.env.JWTSECRET,\r\nCUSTOMHERDERKEY:process.env.CUSTOMHERDERKEY,\r\nUSERSWAGGER:process.env.USERSWAGGER,\r\nPASSWORDSWAGGER:process.env.PASSWORDSWAGGER,\r\nFIXDATA_MATERIAL_UNIT_PIECE:process.env.FIXDATA_MATERIAL_UNIT_PIECE,\r\nFIXDATA_MATERIAL_UNIT_WEIGHT:process.env.FIXDATA_MATERIAL_UNIT_WEIGHT,\r\nLOGACCESSPATH:process.env.LOGACCESSPATH,\r\nPASSWORDACADEMY:process.env.PASSWORDACADEMY,\r\n}\n\n//# sourceURL=webpack://track-tire-backend/./app/appSettingSite.js?");

/***/ }),

/***/ "./app/bin/www.js":
/*!************************!*\
  !*** ./app/bin/www.js ***!
  \************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// #!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar app = __webpack_require__(/*! ../app */ \"./app/app.js\");\nvar debug = __webpack_require__(/*! debug */ \"debug\")('webapi:server');\nvar http = __webpack_require__(/*! http */ \"http\");\nvar _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\n/**\n * Get port from environment and store in Express.\n */\n\nvar port = normalizePort(process.env.PORT || _config.port);\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nvar server = http.createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  var port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  var bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  var addr = server.address();\n  var bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  debug('Listening on ' + bind);\n}\n\n\n//# sourceURL=webpack://track-tire-backend/./app/bin/www.js?");

/***/ }),

/***/ "./app/cryptoSetting.js":
/*!******************************!*\
  !*** ./app/cryptoSetting.js ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var CryptoJS = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nvar appSetting = __webpack_require__(/*! ./appSetting.js */ \"./app/appSetting.js\");\r\nconst SECRET = appSetting.jwtSecret;\r\n\r\nconst iv = CryptoJS.enc.Hex.parse(\"50616e796154686f6e676d75616e67\");\r\n\r\nconst encrypt = (wording) => {\r\n    return CryptoJS.AES.encrypt(wording, SECRET,{iv:iv}).toString()\r\n}\r\nconst decrypt=(wording)=>{\r\n    return  CryptoJS.AES.decrypt(wording, SECRET,{iv:iv}).toString(CryptoJS.enc.Utf8);\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n    encrypt: encrypt,\r\n    decrypt: decrypt\r\n}\n\n//# sourceURL=webpack://track-tire-backend/./app/cryptoSetting.js?");

/***/ }),

/***/ "./app/dbconnect.js":
/*!**************************!*\
  !*** ./app/dbconnect.js ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {\r\n  Client,\r\n  Pool\r\n} = __webpack_require__(/*! pg */ \"pg\")\r\nvar dbConnect = __webpack_require__(/*! ./appSetting.js */ \"./app/appSetting.js\");\r\n// const connectionString = 'postgresql://postgres:mysecretpassword@localhost:5432/testx';\r\n// const pool = new Pool({\r\n//     connectionString: connectionString,\r\n//   })\r\nlet config = dbConnect.dbConnect.dbConnect;\r\n\r\n\r\n\r\nconst pool = new Pool(config);\r\n\r\ntry {\r\n  pool.connect((err, db) => {\r\n    if (err) {\r\n      console.log(\"error connect pool\", err)\r\n    } else {\r\n      db.query('SELECT NOW()', (err, result) => {\r\n        if (err) console.log(\"error connect test Select\", err);\r\n        console.log('connect database--> SYSTEM', result.rows)\r\n        \r\n      })\r\n    }\r\n\r\n  });\r\n\r\n\r\n} catch (e) {\r\n  console.log(\"error connect pool\", e)\r\n} finally {\r\n\r\n}\r\n\r\n// var client = new Client({\r\n//     connectionString: connectionString,\r\n//   })\r\n// client.connect()\r\n// client.query('SELECT NOW()', (err, res) => {\r\n//   console.log(err, res)\r\n//   client.end()\r\n// })\r\n\r\nmodule.exports = {\r\n  connectionPool: pool,\r\n  config: config,\r\n};\n\n//# sourceURL=webpack://track-tire-backend/./app/dbconnect.js?");

/***/ }),

/***/ "./app/jwtSetting.js":
/*!***************************!*\
  !*** ./app/jwtSetting.js ***!
  \***************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const jwt = __webpack_require__(/*! jwt-simple */ \"jwt-simple\");\nvar moment = __webpack_require__(/*! moment */ \"moment\");\nvar appSetting = __webpack_require__(/*! ./appSetting.js */ \"./app/appSetting.js\");\nvar userService = __webpack_require__(/*! ./service/userService */ \"./app/service/userService.js\")\nvar _userService = new userService();\n//ใช้ในการ decode jwt ออกมา\nconst ExtractJwt = (__webpack_require__(/*! passport-jwt */ \"passport-jwt\").ExtractJwt);\n//ใช้ในการประกาศ Strategy\nconst JwtStrategy = (__webpack_require__(/*! passport-jwt */ \"passport-jwt\").Strategy);\nconst SECRET = appSetting.jwtSecret; \nconst jwtOptions = {\n   jwtFromRequest: ExtractJwt.fromHeader(\"authorization\"),\n   secretOrKey: SECRET,//SECRETเดียวกับตอนencodeในกรณีนี้คือ MY_SECRET_KEY\n}\nconst jwtAuth = new JwtStrategy(jwtOptions, (payload, done) => {\n   if(payload.sys==\"c\"){\n        _userService.checkAuth(payload.sub).then((res)=>(res.rows.length>0)?done(null, true):done(null, false)).catch(e=>done(null, false))\n   }\n});\n\nmodule.exports = {\n    SECRET : SECRET,\n    jwtAuth:jwtAuth\n};\n\n//# sourceURL=webpack://track-tire-backend/./app/jwtSetting.js?");

/***/ }),

/***/ "./app/routes/auth.js":
/*!****************************!*\
  !*** ./app/routes/auth.js ***!
  \****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var express = __webpack_require__(/*! express */ \"express\");\nvar router = express.Router();\nvar baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\nvar _baseService = new baseService();\nvar userService = __webpack_require__(/*! ../service/userService */ \"./app/service/userService.js\");\nvar _userService = new userService();\nconst _QueryLogin = __webpack_require__(/*! ../query/queryLogin.json */ \"./app/query/queryLogin.json\");\nvar _QueryCompany = __webpack_require__(/*! ../query/queryCompany.json */ \"./app/query/queryCompany.json\");\nvar companyService = __webpack_require__(/*! ../service/companyService */ \"./app/service/companyService.js\");\nvar _companyService = new companyService();\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\n\nconst jwt = __webpack_require__(/*! jwt-simple */ \"jwt-simple\");\nvar moment = __webpack_require__(/*! moment */ \"moment\");\nvar JwtSetting = __webpack_require__(/*! ../jwtSetting */ \"./app/jwtSetting.js\");\nconst passport = __webpack_require__(/*! passport */ \"passport\");\npassport.use(JwtSetting.jwtAuth);\nconst cryptoOption = __webpack_require__(/*! ../cryptoSetting */ \"./app/cryptoSetting.js\");\n\nconst TokenEncode = (payload) => {\n  return jwt.encode(payload, JwtSetting.SECRET);\n};\nconst TokenDecode = (token) => {\n  return jwt.decode(token, JwtSetting.SECRET);\n};\nconst getUserIDByToken = (token) => {\n  let payload = TokenDecode(token);\n  if (payload.fup && payload.sys == \"c\") {\n    return payload.fup;\n  }\n  return null;\n};\nconst getAdminIDByToken = (token) => {\n  let payload = TokenDecode(token);\n  if (payload.fup && payload.sys == \"s\") {\n    return payload.fup;\n  }\n  return null;\n};\nconst getCompanyIdByToken = (token) => {\n  let payload = TokenDecode(token);\n  if (payload.com && payload.sys == \"c\") {\n    return payload.com;\n  }\n  return null;\n};\nconst getPayload = (token) => {\n  return TokenDecode(token);\n};\nconst requireJWTAuth = passport.authenticate(\"jwt\", {\n  session: false,\n});\n\nrouter.post(\"/login\", async (req, res, next) => {\n  if (req.body.user && req.body.password) {\n    _baseService\n      .baseQueryWithParameter(_QueryLogin.checkUserPassword, [req.body.user])\n      .then((_res) => {\n        if (_res.rows.length > 0) {\n          if (\n            req.body.password == cryptoOption.decrypt(_res.rows[0].iu_password)\n          ) {\n            _companyService\n              .findByIdCompany(_res.rows[0].iu_company_id)\n              .then((_res2) => {\n                var iat = moment(_res2.now);\n                var exp = moment(new Date()).add(7, \"days\");\n                const payload = {\n                  sub: req.body.user,\n                  fup: _res.rows[0].iu_id,\n                  com: _res.rows[0].iu_company_id,\n                  sys: \"c\",\n                  iat: iat.unix(),\n                  exp: exp.unix(),\n                };\n                var token = TokenEncode(payload);\n                _userService\n                  .updateUserToken(token, iat, exp, req.body.user)\n                  .then((__res) => {\n                    res.status(200).json({\n                      message: \"login sucess\",\n                      iat: iat,\n                      exp: exp,\n                      token: token,\n                    });\n                  })\n                  .catch((e) => {\n                    res.status(500).send({\n                      message: \"login fail : Try again\",\n                    });\n                  });\n              });\n          } else {\n            res.status(200).json({\n              message: \"login fail : Wrong username or password\",\n            });\n          }\n        } else {\n          res.status(200).json({\n            message: \"login fail : Wrong username or password\",\n          });\n        }\n      })\n      .catch((_error) => {\n        res.status(400).send({\n          message: _error.message,\n        });\n      });\n  } else {\n    res.status(200).send({\n      message: \"login fail : Wrong username or password\",\n    });\n  }\n});\n\nrouter.post(\"/authorized/service\", async (req, res, next) => {\n  var token = req.headers.authorization;\n  var user_id = _getUserIDByToken(token);\n  let _logService = new logService();\n  let _log = _logService.model;\n\n  _log.activity.parameter = {\n    body: req.body,\n    query: req.query,\n    header: req.headers,\n    payload: _getPayload(token),\n  };\n  _log.activity.path = req.baseUrl + req.path;\n\n\n});\n\nrouter.post('/login/admin', async (req, res, next) => {\n \n    if (req.body.user && req.body.password) {\n        _baseService.baseQueryWithParameter(_QueryLogin.checkAdminPassword, [req.body.user, req.body.password]).then(_res => {\n            if (_res.rows.length > 0) {\n                var iat = moment(new Date());\n                var exp = moment(new Date()).add(7, 'days'); // exp:moment(new Date()).add(7,'days').unix()//days,hours,minutes\n                const payload = {\n                    sub: req.body.user,\n                    fup: _res.rows[0].id,\n                    sys: \"s\",\n                    iat: iat.unix(),\n                    exp: exp.unix()\n                };\n                var token = TokenEncode(payload);\n\n                console.log(iat, exp, req.body.user);\n                _userService.updateAdminToken(token, iat, exp, req.body.user).then(__res => {\n                    res.status(200).json({\n                        message: 'login sucess',\n                        iat: iat,\n                        exp: exp,\n                        token: token\n                    })\n                }).catch(e => {\n                    res.status(500).send({\n                        message: 'login fail : Try again'\n                    })\n                })\n\n            } else {\n                res.status(200).json({\n                    message: 'login fail : Wrong username or password',\n                })\n            }\n\n        }).catch(_error => {\n            res.status(400).send({\n                message: _error.message\n            })\n        })\n    } else {\n        res.status(200).send({\n            message: 'login fail : Wrong username or password'\n        })\n    }\n});\n\nrouter.get(\"/test\", requireJWTAuth, (req, res) => {\n  res.status(200).json({\n    message: \"You Are Authorize\",\n  });\n});\n\nmodule.exports = {\n  router: router,\n  requireJWTAuth: requireJWTAuth,\n  getUserIDByToken: getUserIDByToken,\n  getAdminIDByToken: getAdminIDByToken,\n  getPayload: getPayload,\n  getCompanyIdByToken: getCompanyIdByToken,\n};\n\n\n//# sourceURL=webpack://track-tire-backend/./app/routes/auth.js?");

/***/ }),

/***/ "./app/routes/index.js":
/*!*****************************!*\
  !*** ./app/routes/index.js ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var express = __webpack_require__(/*! express */ \"express\");\r\nvar router = express.Router();\r\n/* var baseService = require('../service/baseService'); */\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\n/* const {\r\n    route\r\n} = require('./users'); */\r\nconst path = __webpack_require__(/*! path */ \"path\");\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\n/* var _baseService = new baseService(); */\r\n\r\n/* GET home page. */\r\nrouter.get('/', function (req, res, next) {\r\n    res.render('index', {\r\n        title: 'Save_Yang_System_Management V 0.0.1'\r\n    });\r\n});\r\n\r\nrouter.get('/TestConnect2', function (req, res, next) {\r\n\r\n    _baseService.TestConnnect2().then(_res => {\r\n        res.status(200).json(_res.rows)\r\n    }).catch(_error => {\r\n        res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    })\r\n\r\n});\r\n\r\n// a middleware function with no mount path. This code is executed for every request to the router\r\nrouter.use(function (req, res, next) {\r\n    if (req.headers[\"x-ttt\"] == _config.customHeaderKey) {\r\n        next();\r\n    } else if ((req.baseUrl + req.path).indexOf(\"static\") > -1) {\r\n        next();\r\n    } else if((req.baseUrl + req.path).indexOf(\"logAccess\") > -1) {\r\n        next();\r\n    }\r\n    else {\r\n        return res.status(404).send(\"i see you \\n (⊙.⊙(☉̃ₒ☉)⊙.⊙)\")\r\n    }\r\n})\r\n\r\nrouter.get('/static/:code', async (req, res, next) =>{\r\n    try {\r\n        if (req.params.code) {\r\n            var f = Buffer.from(req.params.code, 'base64').toString('utf8');\r\n            if (f.indexOf(\"./uploads\") == 0) {\r\n                if(f.indexOf(\"/logs/\") == 9){\r\n                    return res.status(404).send(\"The file does not exist\");\r\n                }\r\n                var temp = path.resolve(f);\r\n                fs.access(temp, error => {\r\n                    if (!error) {\r\n                        res.setHeader('Content-Disposition', 'attachment; filename=' + path.basename(temp));\r\n                        res.setHeader('Content-Transfer-Encoding', 'binary');\r\n                        res.setHeader('Content-Type', 'application/octet-stream');\r\n                        res.sendFile(temp,{},(err)=>{\r\n                            if (err) {\r\n                                next(err)\r\n                            }\r\n                        });\r\n                    } else {\r\n                        return res.status(404).send(\"The file does not exist\");\r\n                    }\r\n                });\r\n                // if (fs.existsSync(temp)) {\r\n                //     res.setHeader('Content-Disposition', 'attachment; filename=' + path.basename(temp));\r\n                //     res.setHeader('Content-Transfer-Encoding', 'binary');\r\n                //     res.setHeader('Content-Type', 'application/octet-stream');\r\n                //     res.sendFile(temp);\r\n                //     console.log(\"The file exists.\");\r\n                // } else {\r\n                //     return res.status(404).send(\"The file does not exist\");\r\n                // }\r\n            }else{\r\n                return res.status(404).send(\"The file does not exist\");\r\n            }\r\n\r\n        } else {\r\n            return res.status(404).send(\"The file does not exist\");\r\n        }\r\n\r\n    } catch (ex) {\r\n        return res.status(500).json(ex.message);\r\n    }\r\n    //    Buffer.from(fullPath).toString('base64')\r\n\r\n});\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack://track-tire-backend/./app/routes/index.js?");

/***/ }),

/***/ "./app/routes/permission.js":
/*!**********************************!*\
  !*** ./app/routes/permission.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst permissionService = __webpack_require__(/*! ../service/permissionService */ \"./app/service/permissionService.js\");\r\nconst _permissionService = new permissionService();\r\nconst _QueryPermission= __webpack_require__(/*! ../query/queryPermission.json */ \"./app/query/queryPermission.json\");\r\nvar _getAdminIDByToken = authRouter.getAdminIDByToken;\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource Permission');\r\n});\r\n\r\n/* \r\nrouter.post('/add', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.addPermission(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); */\r\n\r\n\r\nrouter.get('/findByUserId', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _permissionService.findByUserIdPermission(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/getAll_ICON', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.getAll_ICON().then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/getAllUser', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.getAllUser().then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/getAllFeature', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.getAllFeature().then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/filterFeature', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.filterFeature(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/getAllFeatureUser', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.getAllFeatureUser().then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/getAllMenu', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n   \r\n    _permissionService.getAllMenu().then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/mgt/getAll_Level', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n   \r\n    _permissionService.get_Level_all().then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/mgt/get_Level_1', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n   \r\n    _permissionService.get_Level_1(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/mgt/get_Level_2', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n   \r\n    _permissionService.get_Level_2(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/mgt/get_Level_3', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n   \r\n    _permissionService.get_Level_3(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findLevelById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _permissionService.findLevelById(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findFeatureById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _permissionService.findFeatureById(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findFeatureUserById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _permissionService.findFeatureUserById(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/add/feature_user', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n  \r\n    _permissionService.addFeatureUser(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.post('/add/feature', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n  \r\n    _permissionService.addFeature(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.post('/add/menu', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n  \r\n    _permissionService.addMenu(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.post('/update/menu', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n  \r\n    _permissionService.updateMenu(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.post('/update/feature', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n  \r\n    _permissionService.updateFeature(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.post('/update/feature_user', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n  \r\n    _permissionService.updateFeature_user(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.get('/del', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n \r\n    _permissionService.delMenu(req.query.id, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/delfeature', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n \r\n    _permissionService.delfeature(req.query.id, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/delfeature_user', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n \r\n    _permissionService.delfeature_user(req.query.id, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/filter/menu/lv1', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n   \r\n  \r\n    _permissionService.filterMenuLv1(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.post('/filter/menu/lv2', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n   \r\n  \r\n    _permissionService.filterMenuLv2(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\n\r\n\r\nrouter.get('/findMenuPermissionByUserId', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.findMenuPermissionByUserId(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.get('/getMenuByUserID', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.getMenuByUserID(req.query.user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.get('/getFeatureByUserID', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.getFeatureByUserID(req.query.user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\n/* \r\nrouter.get('/getLevel2ByLv1', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    console.log(req.body);\r\n    _permissionService.getLevel2ByLv1(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}) */\r\n\r\n\r\nrouter.post('/getLevel2ByLv1', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    console.log(req.body);\r\n    _permissionService.getLevel2ByLv1(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/getLevel3ByLv2', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    console.log(req.body);\r\n    _permissionService.getLevel3ByLv2(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/addMenuPermission', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n /*    console.log(req.body); */\r\n    _permissionService.addMenuPermission(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n/* router.post('/update/menu', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _permissionService.update_menu(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n */\r\n\r\n\r\nrouter.post('/sorting_menu', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n   /*  if (!req.body.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    } */\r\n    _permissionService.sorting_menu(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\n\r\nrouter.get('/getOEMByUserID', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.getOEMByUserID(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\n\r\nrouter.get('/findOemUserById', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.findOemUserById(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\n\r\n\r\nrouter.post('/update/oem_user', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n    _permissionService.updateOem_user(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack://track-tire-backend/./app/routes/permission.js?");

/***/ }),

/***/ "./app/routes/system_mgt.js":
/*!**********************************!*\
  !*** ./app/routes/system_mgt.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\n\r\nconst systemMgtService = __webpack_require__(/*! ../service/system_mgtService */ \"./app/service/system_mgtService.js\");\r\nconst _systemMgtService = new systemMgtService();\r\n\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\n\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource material');\r\n});\r\n\r\n\r\nrouter.post('/filterTrailerbrandType', /* _auth, */ async (req, res, next) => {\r\n    //console.log(\"เข้าเเล้ว\");\r\n/*     var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token); */\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n     /*    \"payload\": _getPayload(token) */\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    \r\n   /*  if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    } */\r\n    try {\r\n        _systemMgtService.filterTrailerbrandType(req.body).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\nrouter.post('/saveTrailerbrandType', /* _auth, */ async (req, res, next) => {\r\n    //console.log(\"เข้าเเล้ว\");\r\n/*     var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token); */\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n     /*    \"payload\": _getPayload(token) */\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    \r\n   /*  if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    } */\r\n    try {\r\n        _systemMgtService.saveTrailerbrandType(req.body).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\nrouter.get('/getTrailerbrandTypeByID', /* _auth, */ async (req, res, next) => {\r\n    //console.log(\"เข้าเเล้ว\");\r\n/*     var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token); */\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n     /*    \"payload\": _getPayload(token) */\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    \r\n   /*  if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    } */\r\n    try {\r\n        _systemMgtService.getTrailerbrandTypeByID(req.query.tbt_id).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\nrouter.get('/delTrailerbrandType', /* _auth, */ async (req, res, next) => {\r\n    //console.log(\"เข้าเเล้ว\");\r\n/*     var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token); */\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n     /*    \"payload\": _getPayload(token) */\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    \r\n   /*  if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    } */\r\n    try {\r\n        _systemMgtService.delTrailerbrandType(req.query.tbt_id).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\nrouter.post('/editTrailerbrandType', /* _auth, */ async (req, res, next) => {\r\n    //console.log(\"เข้าเเล้ว\");\r\n/*     var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token); */\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n     /*    \"payload\": _getPayload(token) */\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    \r\n   /*  if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    } */\r\n    try {\r\n        _systemMgtService.editTrailerbrandType(req.body).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack://track-tire-backend/./app/routes/system_mgt.js?");

/***/ }),

/***/ "./app/routes/upload.js":
/*!******************************!*\
  !*** ./app/routes/upload.js ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var express = __webpack_require__(/*! express */ \"express\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nvar {\r\n    v4: uuidv4\r\n} = __webpack_require__(/*! uuid */ \"uuid\");\r\nvar XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n// mime.getType('txt');                    // ⇨ 'text/plain'\r\n// mime.getExtension('text/plain');        // ⇨ 'txt'\r\nvar router = express.Router();\r\n\r\nrouter.post('/', async (req, res) => {\r\n    res.send({\r\n        message: 'file uploaded'\r\n    });\r\n});\r\nrouter.post('/profile',/* _auth, */ async (req, res,next) => {\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    var token = req.headers.authorization;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    try {\r\n     \r\n        if (!req.files) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file uploaded'\r\n            });\r\n        } else {\r\n         \r\n            //Use the name of the input field (i.e. \"avatar\") to retrieve the uploaded file\r\n            //console.log(req.files.Profile);7\r\n            let profile = req.files.Profile;\r\n            let _genName = uuidv4() + \"_\" + profile.name;\r\n            let path = req.body.typeFile;\r\n            let rootPath = \"./uploads/\";\r\n            let fullPath = rootPath + path + \"/\" + _genName;\r\n            //Use the mv() method to place the file in upload directory (i.e. \"uploads\")\r\n            console.log(fullPath);\r\n            profile.mv(fullPath);\r\n            console.log(\"HERE\")\r\n            let temp = {\r\n                status: true,\r\n                message: 'File is uploaded',\r\n                data: {\r\n                    orgin_name: profile.name,\r\n                    name: _genName,\r\n                    path: Buffer.from(fullPath).toString('base64'),\r\n                    mimetype: profile.mimetype,\r\n                    size: profile.size\r\n                }\r\n            }\r\n    /*         _log.activity.response = temp; */\r\n            //send response\r\n            console.log(temp);\r\n            res.send(temp);\r\n        }\r\n    } catch (err) {\r\n      \r\n        _log.activity.error = err.message\r\n        _log.activity.status = false;\r\n        res.status(500).send(err);\r\n       \r\n    } finally {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    }\r\n});\r\nrouter.post('/document',_auth, async (req, res,next) => {\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    var token = req.headers.authorization;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    try {\r\n        if (!req.files) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file uploaded'\r\n            });\r\n        } else {\r\n            //Use the name of the input field (i.e. \"avatar\") to retrieve the uploaded file\r\n            var form = new multiparty.Form();\r\n            form.parse(req, function (err, fields, files) {\r\n                let profile =Array.isArray(req.files.Profile)? req.files.Profile:[req.files.Profile];\r\n                let data = [];\r\n                profile.forEach(p => {\r\n                    let _genName = uuidv4() + \"_\" + p.name;\r\n                    let path = req.body.typeFile;\r\n                    let rootPath = \"./uploads/\"\r\n                    let fullPath = rootPath + path + \"/\" + _genName\r\n                    //Use the mv() method to place the file in upload directory (i.e. \"uploads\")\r\n                    p.mv(fullPath);\r\n                    data.push({\r\n                        orgin_name: p.name,\r\n                        name: _genName,\r\n                        path: Buffer.from(fullPath).toString('base64'),\r\n                        mimetype: p.mimetype,\r\n                        size: p.size\r\n                    })\r\n                })\r\n                _log.activity.response = data;\r\n                //send response\r\n                res.send({\r\n                    status: true,\r\n                    message: 'File is uploaded',\r\n                    data: data\r\n                });\r\n            })\r\n        }\r\n    } catch (err) {\r\n        _log.activity.error = err.message\r\n        _log.activity.status = false;\r\n        res.status(500).send(err);\r\n    } finally {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    }\r\n});\r\n\r\nrouter.post('/excel', async (req, res,next) => {\r\n    console.log(mime.getType('xlsx') + \"<---->\" + req.files.file.mimetype)\r\n    let mimeTypeExcel = [mime.getType('xlsx'), mime.getType('xls')];\r\n    try {\r\n        if (!req.files) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file uploaded'\r\n            });\r\n        } else if (mimeTypeExcel.indexOf(req.files.file.mimetype) == -1) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file XLSX'\r\n            });\r\n        } else {\r\n            var workbook = XLSX.read(req.files.file.data, {\r\n                type: 'buffer'\r\n            });\r\n            var sheet_name_list = workbook.SheetNames;\r\n            var JsonList = [];\r\n            sheet_name_list.forEach(ws => {\r\n                JsonList.push(XLSX.utils.sheet_to_json(workbook.Sheets[ws]));\r\n            })\r\n            res.status(200).json(JsonList);\r\n        }\r\n    } catch (err) { \r\n        res.status(500).send(err);\r\n    } \r\n})\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack://track-tire-backend/./app/routes/upload.js?");

/***/ }),

/***/ "./app/service/baseService.js":
/*!************************************!*\
  !*** ./app/service/baseService.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {\n    Client,\n    Pool\n} = __webpack_require__(/*! pg */ \"pg\")\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\nconst connectionPool = connectionSetting.connectionPool;\nconst connectionConfig = connectionSetting.config;\n\nclass baseService {\n    TestConnnect() {\n        return new Promise(((resolve, reject) => {\n            connectionPool.connect((err, db) => {\n                if (err) reject(err);\n                db.query('SELECT NOW()', (err, result) => {\n                    if (err) reject(err);\n                    resolve(result);\n                })\n            });\n        }));\n    }\n    selectAll(table) {\n        return new Promise(((resolve, reject) => {\n            connectionPool.connect((err, db) => {\n                if (err) reject(err);\n                db.query('SELECT * FROM ' + table, (err, result) => {\n                    if (err) reject(err);\n                    resolve(result);\n                })\n            });\n        }));\n    }\n    TestConnnect2() {\n        return new Promise(((resolve, reject) => {\n            var client = new Client(connectionConfig)\n            client.connect((err, db) => {\n                if (err) reject(err);\n                db.query('SELECT NOW()').then(result => resolve(result)).catch(err => reject(err)).then(() => client.end());\n            })\n\n        }))\n    }\n    baseQuery(stringQuery) {\n        return new Promise(((resolve, reject) => {\n            var client = new Client(connectionConfig)\n            client.connect((err, db) => {\n                if (err) reject(err);\n                db.query(stringQuery).then(result => resolve(result)).catch(err => reject(err)).then(() => client.end());\n            })\n\n        }))\n    }\n    baseQueryWithParameter(stringQuery, Parameter) {\n        return new Promise(((resolve, reject) => {\n            (async () => {\n                var client = new Client(connectionConfig)\n                await client.connect();\n                try {\n                    var query = await client.query(stringQuery, Parameter);\n                    resolve(query);\n                } catch (e) {\n                    reject(e);\n                } finally {\n                    await client.end();\n                }\n            })().catch(e => {\n                console.log(e);\n                reject(e);\n            })\n\n        }))\n    }\n    baseQueryWithParameterOsl(stringQuery, Parameter) {\n        return new Promise(((resolve, reject) => {\n            (async () => {\n                var client = new Client(connectionConfig)\n                await client.connect();\n                try {\n                    var query = await client.query(stringQuery, Parameter);\n                    resolve(query);\n                } catch (e) {\n                    reject(e);\n                } finally {\n                    await client.end();\n                }\n            })().catch(e => {\n                console.log(e);\n                reject(e);\n            })\n\n        }))\n    }\n\n}\nmodule.exports = baseService;\n\n//# sourceURL=webpack://track-tire-backend/./app/service/baseService.js?");

/***/ }),

/***/ "./app/service/companyService.js":
/*!***************************************!*\
  !*** ./app/service/companyService.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst {\r\n    Client,\r\n    Pool\r\n} = __webpack_require__(/*! pg */ \"pg\")\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryCompany = __webpack_require__(/*! ../query/queryCompany.json */ \"./app/query/queryCompany.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar {\r\n    v4: uuidv4\r\n} = __webpack_require__(/*! uuid */ \"uuid\");\r\nvar CryptoJS = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nvar appSetting = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst SECRET = appSetting.jwtSecret; \r\nconst cryptoOption = __webpack_require__(/*! ../cryptoSetting */ \"./app/cryptoSetting.js\");\r\nconst { config } = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst { mode } = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nclass companyService {\r\n   /*  async addNewCompany(model, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n            try {\r\n                (async () => {\r\n                    var client = new Client(connectionConfig)\r\n                    await client.connect()\r\n                    try {\r\n                        await client.query('BEGIN');\r\n                        let company_id = uuidv4();\r\n                        const config_data = {\"status_inform\":null,\"po_sign\":null,\"com_name\":null,\"inform\":null,\"remark\":[{\"key\":\"status_inform\",\"remark\":\"สำหรับเปิด/ปิดประกาศตอนที่ลูกค้าเข้าสู้ระบบ\"},{\"key\":\"po_sign\",\"remark\":\"ชื่อผู็อนุมัติใบสั่งซื้อ\"},{\"key\":\"com_name\",\"remark\":\"ชื่อบริษัทลูกค้า\"},{\"key\":\"inform\",\"remark\":\"ข้อความที่จะประกาศให้ทางลูกค้าทราบ\"}]};\r\n                        await client.query(_QueryCompany.addNewCompany, [company_id, admin_id, model.company_name|| null, model.company_detail|| null, model.apply_date|| null, model.start_date|| null, model.expire_date|| null, model.is_factory_active|| null, model.logo_company|| null, model.logo_company_path|| null, model.logo_company_name|| null,model.abbr||null, config_data, moment(new Date()), true]);\r\n                        if (model.oem && model.oem.length > 0) {\r\n                            for (const o of model.oem) {\r\n                                let oem_id = uuidv4();\r\n                                await client.query(_QueryCompany.addOEMByCompany, [oem_id, company_id, admin_id, o.name|| null, o.logo|| null, o.logo_path|| null, o.logo_name|| null, moment(new Date()), true, true]);\r\n                            }\r\n                        }\r\n                        if (model.document && model.document.length > 0) {\r\n                            for (const d of model.document) {\r\n                                let doc_id = uuidv4();\r\n                                await client.query(_QueryCompany.addDocCompany, [doc_id, company_id, d.document|| null, d.document_path|| null, d.document_name|| null, moment(new Date()), true]);\r\n                            }\r\n                        }\r\n\r\n                        await client.query('COMMIT')\r\n                        console.log(\"COMMIT\")\r\n                        resolve(true);\r\n                    } catch (e) {\r\n                        await client.query('ROLLBACK')\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end()\r\n                    }\r\n                })().catch(e => {\r\n                    console.log(e);\r\n                    throw Error(e)\r\n                })\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        }))\r\n\r\n    }\r\n    async UpdateNewCompany(model, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n                await client.connect()\r\n                try {\r\n                    await client.query('BEGIN');\r\n                   \r\n                    await client.query(_QueryCompany.updateCompany, [admin_id, model.company_name|| null, model.company_detail|| null, model.apply_date|| null, model.start_date|| null, model.expire_date|| null, model.is_factory_active|| null, model.logo_company|| null, model.logo_company_path|| null, model.logo_company_name|| null, model.abbr ||null, model.id]);\r\n                    if (model.oem && model.oem.length > 0) {\r\n                        for (const o of model.oem) {\r\n                            if (o.id) {\r\n                                await client.query(_QueryCompany.updateOEMByCompany, [admin_id, o.name|| null, o.logo|| null, o.logo_path|| null, o.logo_name|| null, o.is_use, o.is_active|| null, o.id]);\r\n\r\n                            } else {\r\n                                let oem_id = uuidv4();\r\n                                await client.query(_QueryCompany.addOEMByCompany, [oem_id, model.id, admin_id, o.name|| null, o.logo|| null, o.logo_path|| null, o.logo_name|| null, moment(new Date()), true, o.is_active|| null]);\r\n                            }\r\n                        }\r\n                    }\r\n                    if (model.document && model.document.length > 0) {\r\n                        for (const d of model.document) {\r\n                            if (!d.id) {\r\n                                let doc_id = uuidv4();\r\n                                await client.query(_QueryCompany.addDocCompany, [doc_id, model.id, d.document|| null, d.document_path|| null, d.document_name|| null, moment(new Date()), true]);\r\n                            }\r\n                            if (d.id && (d.is_use == false)) {\r\n                                await client.query(_QueryCompany.updateDocCompany, [d.is_use, d.id]);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    await client.query('COMMIT')\r\n                    console.log(\"COMMIT\")\r\n                    resolve(true);\r\n                } catch (e) {\r\n                    await client.query('ROLLBACK')\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }\r\n    async delCompanyById(id, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n\r\n                await client.connect()\r\n                try {\r\n                    await client.query(_QueryCompany.delCompany, [id]);\r\n                    resolve(true);\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }\r\n    async SetupCompany(model, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n                await client.connect()\r\n                try {\r\n                    var config_remark = [];\r\n                    //console.log(model.config);\r\n                    for(var r = 0; r < model.config.length; r++){\r\n                        let temp_remark ={\r\n                            key:model.config[r].key,\r\n                            remark:model.config[r].remark,\r\n                        }\r\n                        config_remark.push(temp_remark);\r\n                    }\r\n                    \r\n                    var obj_config = {};\r\n                    \r\n                    for(let i = 0;i < model.config.length;i++){\r\n                      if(model.config[i].is_use === true){\r\n                        var key = `${model.config[i].key}`;\r\n                   \r\n                        var value = model.config[i].value;\r\n                        obj_config[key] = value;\r\n                      }\r\n                       \r\n                   \r\n                        \r\n                         \r\n        \r\n                    }\r\n                    obj_config['remark'] = config_remark;\r\n                   // console.log(obj_config)\r\n                   // console.log(config_remark)\r\n                    //throw Error(\"break\");\r\n                \r\n          \r\n                    await client.query(_QueryCompany.setupCompany, [model.fg_min|| null, model.fg_max|| null, model.raw_min|| null, model.raw_max|| null, model.rank_a|| null, model.rank_b|| null, model.rank_c|| null, model.rank_d|| null, model.factory_capacity|| null, model.id , obj_config || null]);\r\n                    resolve(true);\r\n                } catch (e) {\r\n                    await client.query('ROLLBACK')\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }\r\n    async findSetupById(id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n\r\n                await client.connect()\r\n                try {\r\n                    var company = await client.query(_QueryCompany.findCompanyById, [id]);\r\n                    if (company.rows.length > 0) {\r\n                        resolve(company.rows[0]);\r\n                    } else {\r\n                        reject(\"not found\");\r\n                    }\r\n\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }*/\r\n    async findByIdCompany(id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n\r\n                await client.connect()\r\n                try {\r\n     \r\n                    let company = await client.query(_QueryCompany.findCompanyById, [id]);\r\n                 \r\n                \r\n                    if (company.rows.length > 0) {\r\n                        \r\n                       \r\n                        resolve(company.rows[0]);\r\n                    } else {\r\n                        reject(\"not found\");\r\n                    }\r\n\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n\r\n\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }\r\n    /* async getMasterCompany(id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n                var company = await client.query(_QueryCompany.getMasterCompany);\r\n                resolve(company.rows);\r\n\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    } */\r\n \r\n    //---------------------user-----------------------\r\n    async addUser(model, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n            try {\r\n                (async () => {\r\n                    var client = new Client(connectionConfig)\r\n                    await client.connect()\r\n                    try {\r\n                        await client.query('BEGIN');\r\n                        let user_id = uuidv4();\r\n                        model.password = (model.password)? cryptoOption.encrypt(model.password):null;\r\n                        var _check =  await client.query(_QueryCompany.checkUsernameEmail,[model.username|| null,model.email|| null])\r\n                        if(_check.rows.length>0){\r\n                            throw Error(\"already username or email\");\r\n                        }\r\n                        await client.query(_QueryCompany.addUser, [user_id, model.company_id, admin_id, model.name|| null, model.sirname|| null, model.username|| null, model.email|| null, model.password|| null, model.mobile1|| null, model.mobile2|| null, model.detail|| null, model.is_active|| null, model.user_profile|| null, model.user_profile_name|| null, model.user_profile_path|| null, moment(new Date()), true]);\r\n\r\n                        if (model.document && model.document.length > 0) {\r\n                            for (const d of model.document) {\r\n                                let doc_id = uuidv4();\r\n                                await client.query(_QueryCompany.addUserDoc, [doc_id, user_id, d.document|| null, d.document_name|| null, d.document_path|| null, moment(new Date()), true]);\r\n                            }\r\n                        }\r\n\r\n                        await client.query('COMMIT')\r\n                        console.log(\"COMMIT\")\r\n                        resolve(true);\r\n                    } catch (e) {\r\n                        await client.query('ROLLBACK')\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end()\r\n                    }\r\n                })().catch(e => {\r\n                    console.log(e);\r\n                    throw Error(e)\r\n                })\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        }))\r\n\r\n    }\r\n    async updateUser(model, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n            try {\r\n                (async () => {\r\n                    var client = new Client(connectionConfig)\r\n                    await client.connect()\r\n                    try {\r\n                       model.password = (model.password)? cryptoOption.encrypt(model.password):null;\r\n                        await client.query('BEGIN');\r\n                        await client.query(_QueryCompany.updateUser, [admin_id, model.name|| null, model.sirname|| null, model.username|| null, model.email|| null, model.password|| null, model.mobile1|| null, model.mobile2|| null, model.detail|| null, model.is_active|| null, model.user_profile|| null, model.user_profile_name|| null, model.user_profile_path|| null, model.id]);\r\n\r\n                        if (model.document && model.document.length > 0) {\r\n                            for (const d of model.document) {\r\n                                if (!d.id) {\r\n                                    let doc_id = uuidv4();\r\n                                    await client.query(_QueryCompany.addUserDoc, [doc_id, model.id, d.document|| null, d.document_name|| null, d.document_path|| null, moment(new Date()), true]);\r\n\r\n                                }\r\n                                if (d.id && (d.is_use == false)) {\r\n                                    await client.query(_QueryCompany.delUserDoc, [d.id]);\r\n                                }\r\n\r\n                            }\r\n                        }\r\n\r\n                        await client.query('COMMIT')\r\n                        console.log(\"COMMIT\")\r\n                        resolve(true);\r\n                    } catch (e) {\r\n                        await client.query('ROLLBACK')\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end()\r\n                    }\r\n                })().catch(e => {\r\n                    console.log(e);\r\n                    throw Error(e)\r\n                })\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        }))\r\n\r\n    }\r\n    async delUser(id, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n\r\n                await client.connect()\r\n                try {\r\n                    await client.query(_QueryCompany.delUser, [id]);\r\n                    resolve(true);\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }\r\n    async findUserById(id, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n\r\n                await client.connect()\r\n                try {\r\n                   var query = await client.query(_QueryCompany.findUserById, [id]);\r\n                   let temp = query.rows.length>0?query.rows[0]:{};\r\n                    if(query.rows.length>0){\r\n                        temp.password = (temp.password)? cryptoOption.decrypt(temp.password):null;\r\n                        let doc = await client.query(_QueryCompany.findDocByUser, [id]);\r\n                        temp.document=doc.rows;\r\n                    }\r\n                    resolve(temp);\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }\r\n    async getAllUser() {\r\n        return new Promise((async (resolve, reject) => {\r\n            (async () => {\r\n                var client = new Client(connectionConfig);\r\n                await client.connect();\r\n                try {\r\n                    let query = await client.query(_QueryCompany.getAllUser);\r\n                    resolve(query.rows);\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end();\r\n                }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n    }\r\n\r\n    async filterUser(model) {\r\n        return new Promise((async (resolve, reject) => {\r\n            (async () => {\r\n                var client = new Client(connectionConfig);\r\n                await client.connect();\r\n                try {\r\n                    let query = await client.query(_QueryCompany.filterUser,[\r\n                        model.name || null,\r\n                        model.username || null,\r\n                        model.email || null,\r\n                        model.company_id || null,\r\n                    ]);\r\n                    resolve(query.rows);\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end();\r\n                }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n    }\r\n\r\n    async getviewOemByUserId(user_id){\r\n        return new Promise((async (resolve, reject) => {\r\n            try {    \r\n                var client = new Client(connectionConfig)\r\n                await client.connect();\r\n                var query = await client.query(_QueryCompany.getviewOemByUserId, [user_id]);\r\n                // if (check.rows.length == 0) {\r\n                //     throw Error(\"not found\")\r\n                // } else {\r\n                //     await client.query(_QueryProductPlaning.updateRealOrder, [model.order,user_id,moment(new Date()),check.rows[0].id]);\r\n                // }\r\n                resolve(query.rows)\r\n            }catch(ex){\r\n                reject(ex); \r\n            }\r\n        }))\r\n    }\r\n    async findOEMByCompanyIdAndUser(user,user_id){\r\n        return new Promise((async (resolve, reject) => {\r\n            try {    \r\n                var client = new Client(connectionConfig)\r\n                await client.connect();\r\n                var query = await client.query(_QueryCompany.getUserDetailByUser, [user_id]);\r\n                \r\n                var oem = await client.query(_QueryCompany.getOEMbyCompanyId,[query.rows[0].company_id]);\r\n                var temp = {\r\n                    user_detail:query.rows[0],\r\n                    oem_list:oem.rows,\r\n                }\r\n                // if (check.rows.length == 0) {\r\n                //     throw Error(\"not found\")\r\n                // } else {\r\n                //     await client.query(_QueryProductPlaning.updateRealOrder, [model.order,user_id,moment(new Date()),check.rows[0].id]);\r\n                // }\r\n                resolve(temp)\r\n            }catch(ex){\r\n                reject(ex); \r\n            }\r\n        }))\r\n    }\r\n    \r\n\r\n}\r\nmodule.exports = companyService\n\n//# sourceURL=webpack://track-tire-backend/./app/service/companyService.js?");

/***/ }),

/***/ "./app/service/logservice.js":
/*!***********************************!*\
  !*** ./app/service/logservice.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var dbConnect = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\n/* var queryLog = require(\"../query/queryLog.json\"); */\r\nconst { Client,Pool } = __webpack_require__(/*! pg */ \"pg\")\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar {\r\n    v4: uuidv4\r\n} = __webpack_require__(/*! uuid */ \"uuid\");\r\n// let oem_id = uuidv4();\r\nvar configLog = dbConnect.dbConnect.dbLogConnect;\r\nclass logService {\r\n    async log(model) {\r\n        return new Promise(((resolve, reject) => {\r\n            (async () => {\r\n                var client = new Client(configLog)\r\n                await client.connect();\r\n                try {\r\n                    // await client.query(queryLog.add, [model.id, model.date, model.activity]);\r\n                    resolve(true);\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end();\r\n                }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n    }\r\n    get model() {\r\n        return {\r\n            id: uuidv4(),\r\n            date: moment(new Date()),\r\n            activity: {\r\n                status: true,\r\n                path: \"\",\r\n                parameter: {},\r\n                response:{},\r\n                error: {}\r\n            }\r\n        }\r\n    }\r\n    // logModel = {\r\n    //     id: uuidv4(),\r\n    //     date: moment(new Date()),\r\n    //     activity: {\r\n    //         status: true,\r\n    //         path: \"\",\r\n    //         parameter: {},\r\n    //         error: {}\r\n    //     }\r\n    // }\r\n    // Eaction = {\r\n    //     add: \"add\",\r\n    //     edit: \"edit\",\r\n    //     del: \"del\",\r\n    //     find: \"find\",\r\n    //     filter: \"filter\",\r\n    //     upload: \"upload\",\r\n    //     login: \"login\",\r\n    //     logout: \"logout\"\r\n    // }\r\n\r\n}\r\nmodule.exports = logService\n\n//# sourceURL=webpack://track-tire-backend/./app/service/logservice.js?");

/***/ }),

/***/ "./app/service/permissionService.js":
/*!******************************************!*\
  !*** ./app/service/permissionService.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryPermission = __webpack_require__(/*! ../query/queryPermission.json */ \"./app/query/queryPermission.json\");\r\n\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { cli } = __webpack_require__(/*! webpack */ \"webpack\");\r\n\r\nclass permissionService {\r\n  /* \r\n    async addMaterial(model, user_id) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n                var query = await client.query(_QueryMaterial.checkNameMaterial, [\r\n                  model.no,\r\n                  model.oem_id,\r\n                ]);\r\n                if (query.rows.length > 0) {\r\n                  reject({\r\n                    message: \"already material no\",\r\n                  });\r\n                }\r\n                let material_id = uuidv4();\r\n               \r\n                console.log(\"COMMIT\");\r\n                resolve(true);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n */\r\n\r\n  async findByUserIdPermission(material_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.findByUserId, [\r\n              material_id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAll_ICON() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getAll_icon, [\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async getAllMenu() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getAllMenu);\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllUser() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getAllUser);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllFeatureUser() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getAllFeatureUser);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllFeature() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getAllFeature);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterFeature(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.filterFeature,[\r\n              model.feature || null,\r\n              model.menu_id || null,\r\n            ]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async get_Level_all() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.get_level_all);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addFeature(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            //console.log(model)\r\n            var checkFeature = await client.query(\r\n              _QueryPermission.checkNameFeature,\r\n              [model.feature,model.menu_id]\r\n            );\r\n            if(checkFeature.rows.length > 0){\r\n              throw Error(\"Feature Name Already!!\");\r\n            }\r\n\r\n            var query_sort = await client.query(_QueryPermission.checkFeature);\r\n            let sort = query_sort.rows[0].max;\r\n            let id = uuidv4();\r\n            /*    if(model.level == 1){\r\n                  let icon = null;\r\n                  let parent_id = null;\r\n                }else if(model.level == 2){\r\n                  let parent_id = model.parent_id;\r\n                } */\r\n            await client.query(_QueryPermission.addFeature, [\r\n              id,\r\n              model.feature,\r\n              model.menu_id,\r\n              sort + 1,\r\n              moment(new Date()),\r\n              user_id,\r\n              user_id,\r\n              moment(new Date()),\r\n              true,\r\n              model.display_feature,\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addFeatureUser(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            var checkFeatureUser = await client.query(\r\n              _QueryPermission.checkFeatureUser,\r\n              [\r\n                model.user_id,\r\n                model.feature_id,\r\n              ]\r\n            );\r\n            if(checkFeatureUser.rows.length > 0){\r\n              throw Error(\"Feature and User has Already!!\");\r\n            }\r\n\r\n            let id = uuidv4();\r\n\r\n            await client.query(_QueryPermission.addFeatureUser, [\r\n              id,\r\n              model.user_id,\r\n              true,\r\n              model.feature_id,\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addMenu(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            var query_sort = await client.query(_QueryPermission.checkMenuSort);\r\n            let sort = query_sort.rows[0].max;\r\n            let id = uuidv4();\r\n            /*    if(model.level == 1){\r\n                  let icon = null;\r\n                  let parent_id = null;\r\n                }else if(model.level == 2){\r\n                  let parent_id = model.parent_id;\r\n                } */\r\n                console.log(model)\r\n               \r\n            await client.query(_QueryPermission.addMenu, [\r\n              id,\r\n              model.name || null,\r\n              model.path || null,\r\n              model.parent_id || null,\r\n              model.level,\r\n              moment(new Date()),\r\n              user_id,\r\n              moment(new Date()),\r\n              user_id,\r\n              true,\r\n              sort + 1,\r\n              model.icon || null,\r\n              model.image_name || null,\r\n              model.image_path || null,\r\n              model.is_image === \"image\" ? true : false,\r\n              model.display_name || null,\r\n\r\n              model.academy || null,\r\n              model.academy_image_name || null,\r\n              model.academy_image_path || null,\r\n              model.academy_image || null,\r\n             \r\n            ]);\r\n           \r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateMenu(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            console.log(model);\r\n            //throw Error(\"break\");\r\n            await client.query(_QueryPermission.updateMenu, [\r\n              model.id,\r\n              model.name || null,\r\n              model.display_name || null,\r\n              model.path || null,\r\n              moment(new Date()),\r\n              user_id,\r\n              model.parent_id || null,\r\n              model.icon || null,\r\n              model.image_name || null,\r\n              model.image_path || null,\r\n              model.is_image === \"image\" ? true : false,\r\n\r\n              model.academy || null,\r\n              model.academy_image_name || null,\r\n              model.academy_image_path || null,\r\n              model.academy_image || null,\r\n\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateFeature(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            await client.query(_QueryPermission.updateFeature, [\r\n              model.id,\r\n              model.feature,\r\n              model.display_feature,\r\n              model.menu_id,\r\n              user_id,\r\n              moment(new Date()),\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateFeature_user(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n\r\n            console.log(model)\r\n          \r\n             await client.query(_QueryPermission.delFeaturePemission,[model.user_id]);\r\n             for(let index = 0; index < model.feature.length; index++){\r\n                let pf_id = uuidv4();\r\n                await client.query(_QueryPermission.addFeaturePemission, [\r\n                  pf_id,\r\n                  model.user_id,\r\n                  true,\r\n                  model.feature[index].id,\r\n                ]);\r\n             }\r\n          /*   await client.query(_QueryPermission.updateFeatureUser, [\r\n              model.id,\r\n              model.user_id,\r\n              model.feature_id,\r\n            ]); */\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delMenu(id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var query = await client.query(_QueryPermission.checkSupMenu, [id]);\r\n            if (query.rows[0].count > 0) {\r\n              reject({\r\n                message: \"Don't delete because have sup menu\",\r\n              });\r\n            } else {\r\n              await client.query(_QueryPermission.delMenu, [id]);\r\n              console.log(\"COMMIT\");\r\n              resolve(true);\r\n            }\r\n            /*   reject({\r\n                message: query,\r\n              }); */\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delfeature(id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          console.log(id);\r\n          try {\r\n            await client.query(_QueryPermission.delFeature, [id]);\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delfeature_user(id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          console.log(id);\r\n          try {\r\n            await client.query(_QueryPermission.delFeatureUser, [id]);\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterMenuLv1(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            var temp = await client.query(_QueryPermission.filterMenuLv1, [\r\n              model.name || null,\r\n            ]);\r\n\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n            console.log(\"COMMIT\");\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterMenuLv2(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            var temp = await client.query(_QueryPermission.filterMenuLv2, [\r\n              model.name || null,\r\n              model.parent_id,\r\n            ]);\r\n\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n            console.log(\"COMMIT\");\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async get_Level_1(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.get_level_1,[\r\n              model.name || null,\r\n              model.path || null,\r\n            ]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async get_Level_2(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(model)\r\n            let temp = await client.query(_QueryPermission.get_level_2,[\r\n              model.name || null,\r\n              model.path || null,\r\n              model.parent_id || null,\r\n            ]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async get_Level_3(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.get_level_3,[\r\n              model.name || null,\r\n              model.path || null,\r\n              model.parent_id || null,\r\n            ]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findLevelById(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.find_level_Byid, [\r\n              id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findFeatureById(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.findByFeatureId, [\r\n              id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findFeatureUserById(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(\r\n              _QueryPermission.findByFeatureUserDataId,\r\n              [id]\r\n            );\r\n            console.log(temp.rows)\r\n          \r\n              resolve(temp.rows);\r\n        \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async getLevel2ByLv1(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n             \r\n          try {\r\n            //console.log(model)\r\n            const arr = [];\r\n            for(var i=0; i < model.length;i++){\r\n              var temp = await client.query(_QueryPermission.getLevelByLv,[model[i].menu_parent]);\r\n              for(var t=0; t < temp.rows.length;t++){\r\n                arr.push(temp.rows[t]);\r\n              }\r\n              \r\n            }\r\n            //console.log(arr)\r\n            if (arr.length > 0) {\r\n              resolve(arr);\r\n            } else {\r\n              resolve(arr);\r\n            } \r\n            console.log(\"COMMIT\");\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getLevel3ByLv2(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n             \r\n          try {\r\n            console.log(model)\r\n            const arr = [];\r\n            for(var i=0; i < model.length;i++){\r\n              var temp = await client.query(_QueryPermission.getLevelByLv,[model[i].menu_parent]);\r\n              for(var t=0; t < temp.rows.length;t++){\r\n                arr.push(temp.rows[t]);\r\n              }\r\n              \r\n            }\r\n            console.log(arr)\r\n            if (arr.length > 0) {\r\n              resolve(arr);\r\n            } else {\r\n              resolve(arr);\r\n            } \r\n            console.log(\"COMMIT\");\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  \r\n  async addMenuPermission(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n             \r\n          try {\r\n            console.log(model)\r\n            const arr = [];\r\n       \r\n              await client.query(_QueryPermission.delMenuPermission,[model[0].user_id]);\r\n      \r\n            for(var i=0; i < model.length;i++){\r\n              let pm_id = uuidv4();\r\n            await client.query(_QueryPermission.addMenuPermission,[pm_id,model[i].menu_id,true, model[i].user_id]);\r\n            }\r\n            console.log(arr)\r\n            resolve(true);\r\n            console.log(\"COMMIT\");\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findMenuPermissionByUserId(user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n             \r\n          try {\r\n          \r\n          \r\n         \r\n              var temp = await client.query(_QueryPermission.findMenuPermissionByUserId,[user_id]);\r\n               console.log(temp.rows)\r\n              \r\n            \r\n            //console.log(arr)\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            } \r\n            console.log(\"COMMIT\");\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async getMenuByUserID(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getMenuByUserId, [\r\n              id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getFeatureByUserID(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getFeatureByUserId, [\r\n              id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n             var temp_Default = {\r\n                user_id:id,\r\n                menu:\"\",\r\n                feature:\"\",\r\n              };\r\n              resolve([temp_Default]);\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n  async sorting_menu(data,admin_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n            let menuByLevel = await client.query(_QueryPermission.getMenuByLevel, [\r\n                data.menu_level,\r\n              ]);\r\n            \r\n\r\n            if (menuByLevel.rows.length === 0) {\r\n              reject(\"not found\");\r\n            }\r\n\r\n            \r\n            if (data.sort_type===\"sort_up\") {\r\n              let menu_for_swap = {};\r\n            for (let index = 0; index < menuByLevel.rows.length; index++) {\r\n              if (data.current_sort_id === menuByLevel.rows[index].id) {\r\n                menu_for_swap[\"menu_id\"] = menuByLevel.rows[index-1].id;\r\n                menu_for_swap[\"menu_sort\"] = menuByLevel.rows[index-1].sort;\r\n              }\r\n            }\r\n\r\n\r\n           /*  console.log(  menuByLevel); */\r\n           /*  console.log(menu_for_swap.menu_id); */\r\n            \r\n            await client.query(_QueryPermission.update_sort, [\r\n              moment(new Date()),\r\n                admin_id,\r\n              menu_for_swap.menu_sort,\r\n              data.current_sort_id,\r\n            ]);\r\n            \r\n            \r\n            await client.query(_QueryPermission.update_sort, [\r\n              moment(new Date()),\r\n              admin_id,\r\n              data.current_sort,\r\n              menu_for_swap.menu_id,\r\n            ]);\r\n\r\n           \r\n\r\n            }else if (data.sort_type===\"sort_down\"){\r\n\r\n              let menu_for_swap = {};\r\n              for (let index = 0; index < menuByLevel.rows.length; index++) {\r\n                if (data.current_sort_id === menuByLevel.rows[index].id) {\r\n                  menu_for_swap[\"menu_id\"] = menuByLevel.rows[index+1].id;\r\n                  menu_for_swap[\"menu_sort\"] = menuByLevel.rows[index+1].sort;\r\n                }\r\n              }\r\n              await client.query(_QueryPermission.update_sort, [\r\n                moment(new Date()),\r\n                  admin_id,\r\n                menu_for_swap.menu_sort,\r\n                data.current_sort_id,\r\n              ]);\r\n              \r\n              \r\n              await client.query(_QueryPermission.update_sort, [\r\n                moment(new Date()),\r\n                admin_id,\r\n                data.current_sort,\r\n                menu_for_swap.menu_id,\r\n              ]);\r\n  \r\n             \r\n            }\r\n\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n    \r\n  async getOEMByUserID(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getOEMByUserID, [\r\n              id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  async findOemUserById(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(id);\r\n            let temp = await client.query(_QueryPermission.findOemUserById, [\r\n              id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              resolve([]);\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  async updateOem_user(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n\r\n            console.log(model)\r\n          \r\n            \r\n             \r\n             if ( model.oem.length > 0) {\r\n\r\n              await client.query(_QueryPermission.delOemPermission,[model.user_id]);\r\n\r\n                  for(let index = 0; index < model.oem.length; index++){\r\n                let pf_id = uuidv4();\r\n                await client.query(_QueryPermission.addOemPermission, [\r\n                  pf_id,\r\n                  model.user_id,\r\n                  model.oem[index].id,\r\n                  true,\r\n                ]);\r\n             }\r\n\r\n             }\r\n          \r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports = permissionService;\r\n\n\n//# sourceURL=webpack://track-tire-backend/./app/service/permissionService.js?");

/***/ }),

/***/ "./app/service/system_mgtService.js":
/*!******************************************!*\
  !*** ./app/service/system_mgtService.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QuerySystemMgt = __webpack_require__(/*! ../query/querySystem_mgt.json */ \"./app/query/querySystem_mgt.json\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { mode } = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nconst { SourceMapDevToolPlugin } = __webpack_require__(/*! webpack */ \"webpack\");\r\nconst { format } = __webpack_require__(/*! util */ \"util\");\r\nconst { count } = __webpack_require__(/*! console */ \"console\");\r\n\r\nclass SystemMgtService{\r\n    \r\n  async filterTrailerbrandType(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           let filter = await client.query(_QuerySystemMgt.filterTrailerType, [\r\n              model.tbt_name || null,\r\n              model.tbt_sub_name || null,\r\n              ]);\r\n\r\n            resolve(filter.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async saveTrailerbrandType(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n\r\n            let check = await client.query(_QuerySystemMgt.checkTrailType, [\r\n                model.tbt_name,\r\n                model.tbt_sub_name,\r\n                ]);\r\n                console.log(\"cge\",check.rows);\r\n                if(check.rows.length > 0){\r\n                    throw Error(\"TrailBrandType Name has System !!!\")\r\n                }\r\n                let id_trail = uuidv4();\r\n           await client.query(_QuerySystemMgt.saveTrailerType, [\r\n              id_trail,\r\n              model.tbt_name,\r\n              model.tbt_sub_name,\r\n              true,\r\n              moment(new Date()),\r\n              moment(new Date()),\r\n              true\r\n              ]);\r\n\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async getTrailerbrandTypeByID(tbt_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n\r\n            let data = await client.query(_QuerySystemMgt.getTrailerTypeByID, [\r\n                tbt_id,\r\n                ]);\r\n               \r\n\r\n            resolve(data.rows[0]);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delTrailerbrandType(tbt_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n\r\n             await client.query(_QuerySystemMgt.delTrailerTyoe, [\r\n                tbt_id,\r\n                ]);\r\n               \r\n\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  \r\n  async editTrailerbrandType(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n\r\n            let check = await client.query(_QuerySystemMgt.checkTrailTypeUpdate, [\r\n                model.tbt_id,\r\n                model.tbt_name,\r\n                model.tbt_sub_name,\r\n                ]);\r\n                if(check.rows.length > 0){\r\n                    throw Error(\"TrailBrandType Name has System !!!\")\r\n                }\r\n\r\n           await client.query(_QuerySystemMgt.updateTrailType, [\r\n              model.tbt_id,\r\n              model.tbt_name,\r\n              model.tbt_sub_name,\r\n              true,\r\n              moment(new Date()),\r\n              true\r\n              ]);\r\n\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = SystemMgtService;\n\n//# sourceURL=webpack://track-tire-backend/./app/service/system_mgtService.js?");

/***/ }),

/***/ "./app/service/userService.js":
/*!************************************!*\
  !*** ./app/service/userService.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\nvar _baseService = new baseService();\nvar _QueryLogin = __webpack_require__(/*! ../query/queryLogin.json */ \"./app/query/queryLogin.json\")\nvar _QueryUser = __webpack_require__(/*! ../query/queryUser.json */ \"./app/query/queryUser.json\")\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\nconst connectionPool = connectionSetting.connectionPool;\nconst connectionConfig = connectionSetting.config;\nvar moment = __webpack_require__(/*! moment */ \"moment\");\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\nconst cryptoOption = __webpack_require__(/*! ../cryptoSetting */ \"./app/cryptoSetting.js\");\nclass userService{\n    async checkAuth(user){\n        return _baseService.baseQueryWithParameter(_QueryLogin.getByUser,[user])\n    }\n    async updateAdminToken(token,token_create,token_exp,user){\n        return _baseService.baseQueryWithParameter(_QueryLogin.updateAdminToken,[token,token_create,token_exp,user])\n    }\n    async updateUserToken(token,token_create,token_exp,user){\n        return _baseService.baseQueryWithParameter(_QueryLogin.updateUserToken,[token,token_create,token_exp,user])\n    }\n    async checkAdminAuth(id){\n        return _baseService.baseQueryWithParameter(_QueryLogin.getByAdmin,[id])\n    }\n\n   \n    async getUserById(user_id) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            (async () => {\n              var client = new Client(connectionConfig);\n              await client.connect();\n              try {\n              \n                var data = await client.query(_QueryUser.getUserById,[user_id]);\n           \n          \n                console.log(data.rows[0]);\n                resolve(data.rows[0]);\n              } catch (e) {\n                reject(e);\n              } finally {\n                await client.end();\n              }\n            })().catch((e) => {\n              console.log(e);\n              throw Error(e);\n            });\n          } catch (e) {\n            reject(e);\n          }\n        });\n      }\n\n\n      async update(model,user_id) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            (async () => {\n              var client = new Client(connectionConfig);\n              await client.connect();\n              try {\n              \n            console.log(model)\n           \n                await client.query(_QueryUser.update,[\n                    user_id,\n                    model.name,\n                    model.sirname,\n                    model.email,\n                    model.mobile1,\n                    model.mobile2,\n                    model.detail,\n                    model.user_profile,\n                    model.user_profile_name,\n                    model.user_profile_path,\n                ]);\n               \n                resolve(true);\n              } catch (e) {\n                reject(e);\n              } finally {\n                await client.end();\n              }\n            })().catch((e) => {\n              console.log(e);\n              throw Error(e);\n            });\n          } catch (e) {\n            reject(e);\n          }\n        });\n      }\n\n      async changePS(model,user_id) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            (async () => {\n              var client = new Client(connectionConfig);\n              await client.connect();\n              try {\n              \n           // console.log(cryptoOption.encrypt(model.old_pass));\n            var check = await client.query(_QueryUser.checkPS,[user_id])    \n            console.log(cryptoOption.decrypt(check.rows[0].password))   \n            console.log(model.old_pass)   \n\n            console.log(check.rows[0].password)\n            console.log(cryptoOption.encrypt(model.old_pass))   \n            \n                if(cryptoOption.decrypt(check.rows[0].password) === model.old_pass){\n                    console.log(\"รหัสเดิม ถูกต้อง\")\n                    await client.query(_QueryUser.changePS,[\n                        user_id,\n                        cryptoOption.encrypt(model.new_pass),\n                    ]);\n                    resolve(true);\n                }else{\n                    throw Error(\"รหัสผ่านเดิมไม่ถูกต้อง !!!\");\n                  \n                }\n           \n              } catch (e) {\n                reject(e);\n              } finally {\n                await client.end();\n              }\n            })().catch((e) => {\n              console.log(e);\n              throw Error(e);\n            });\n          } catch (e) {\n            reject(e);\n          }\n        });\n      }\n\n\n\n}\nmodule.exports = userService;\n\n//# sourceURL=webpack://track-tire-backend/./app/service/userService.js?");

/***/ }),

/***/ "body-parser":
/*!******************************!*\
  !*** external "body-parser" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("body-parser");

/***/ }),

/***/ "cookie-parser":
/*!********************************!*\
  !*** external "cookie-parser" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("cookie-parser");

/***/ }),

/***/ "cors":
/*!***********************!*\
  !*** external "cors" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("cors");

/***/ }),

/***/ "crypto-js":
/*!****************************!*\
  !*** external "crypto-js" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto-js");

/***/ }),

/***/ "debug":
/*!************************!*\
  !*** external "debug" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("debug");

/***/ }),

/***/ "dotenv":
/*!*************************!*\
  !*** external "dotenv" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("dotenv");

/***/ }),

/***/ "express":
/*!**************************!*\
  !*** external "express" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("express");

/***/ }),

/***/ "express-basic-auth":
/*!*************************************!*\
  !*** external "express-basic-auth" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("express-basic-auth");

/***/ }),

/***/ "express-fileupload":
/*!*************************************!*\
  !*** external "express-fileupload" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("express-fileupload");

/***/ }),

/***/ "http-errors":
/*!******************************!*\
  !*** external "http-errors" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("http-errors");

/***/ }),

/***/ "jwt-simple":
/*!*****************************!*\
  !*** external "jwt-simple" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("jwt-simple");

/***/ }),

/***/ "mime":
/*!***********************!*\
  !*** external "mime" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("mime");

/***/ }),

/***/ "moment":
/*!*************************!*\
  !*** external "moment" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("moment");

/***/ }),

/***/ "morgan":
/*!*************************!*\
  !*** external "morgan" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("morgan");

/***/ }),

/***/ "multiparty":
/*!*****************************!*\
  !*** external "multiparty" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("multiparty");

/***/ }),

/***/ "passport":
/*!***************************!*\
  !*** external "passport" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("passport");

/***/ }),

/***/ "passport-jwt":
/*!*******************************!*\
  !*** external "passport-jwt" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("passport-jwt");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("pg");

/***/ }),

/***/ "rotating-file-stream":
/*!***************************************!*\
  !*** external "rotating-file-stream" ***!
  \***************************************/
/***/ ((module) => {

"use strict";
module.exports = require("rotating-file-stream");

/***/ }),

/***/ "swagger-ui-express":
/*!*************************************!*\
  !*** external "swagger-ui-express" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("swagger-ui-express");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "uuid":
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("uuid");

/***/ }),

/***/ "webpack":
/*!**************************!*\
  !*** external "webpack" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("webpack");

/***/ }),

/***/ "xlsx":
/*!***********************!*\
  !*** external "xlsx" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("xlsx");

/***/ }),

/***/ "console":
/*!**************************!*\
  !*** external "console" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("console");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "./app/query/queryCompany.json":
/*!*************************************!*\
  !*** ./app/query/queryCompany.json ***!
  \*************************************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse('{\"findCompanyById\":\"select company_id, company_name, company_detail, company_start_date, company_expire_date, company_created_date, company_is_use, company_logo, company_logo_path, company_logo_name, company_updated_date, company_cm_id, company_abbr,now()::timestamp from \\\\\"company\\\\\" where company_id=$1 and company_is_use=true\"}');\n\n//# sourceURL=webpack://track-tire-backend/./app/query/queryCompany.json?");

/***/ }),

/***/ "./app/query/queryLogin.json":
/*!***********************************!*\
  !*** ./app/query/queryLogin.json ***!
  \***********************************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse('{\"updateUserToken\":\"update \\\\\"identity_user\\\\\" set \\\\\"iu_token\\\\\"=$1,\\\\\"iu_token_create\\\\\"=$2,\\\\\"iu_token_expired\\\\\"=$3 where \\\\\"iu_username\\\\\"=$4 and \\\\\"iu_is_use\\\\\"=true\",\"getById\":\"select * from login where \\\\\"Id\\\\\"=$1\",\"checkUserPassword\":\"select  iu_id, iu_company_id, iu_username, iu_password from identity_user where \\\\\"iu_username\\\\\"=$1 and \\\\\"iu_is_use\\\\\"=true\",\"getByUser\":\"select iu_username from identity_user where \\\\\"iu_username\\\\\"=$1 and \\\\\"iu_is_use\\\\\"=true limit 1\",\"checkAdminPassword\":\"select admin_id,admin_username from \\\\\"admin\\\\\" where \\\\\"admin_username\\\\\"=$1 and \\\\\"admin_password\\\\\"=$2 and \\\\\"admin_is_use\\\\\"=true\",\"updateAdminToken\":\"update \\\\\"admin\\\\\" set \\\\\"admin_token\\\\\"=$1,\\\\\"admin_token_created\\\\\"=$2,\\\\\"admin_token_expired\\\\\"=$3 where \\\\\"admin_username\\\\\"=$4 and \\\\\"admin_is_use\\\\\"=true\",\"getByAdmin\":\"select admin_username from \\\\\"admin\\\\\" where \\\\\"admin_id\\\\\"=$1 and \\\\\"admin_is_use\\\\\"=true limit 1\"}');\n\n//# sourceURL=webpack://track-tire-backend/./app/query/queryLogin.json?");

/***/ }),

/***/ "./app/query/queryPermission.json":
/*!****************************************!*\
  !*** ./app/query/queryPermission.json ***!
  \****************************************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse('{\"findByUserId\":\"SELECT x.id, user_id, x.is_use, feature_id ,b.id menu_id, b.name menu_name, a.id feature_id, a.name feature_name FROM \\\\\"permission\\\\\" x left join \\\\\"feature\\\\\" a on a.id = x.feature_id left join \\\\\"menu\\\\\" b on b.id = a.menu_id left join \\\\\"identity_user\\\\\" c on c.id = x.user_id where user_id = $1\",\"getAllMenu\":\"SELECT id, name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, display_name FROM \\\\\"menu\\\\\" WHERE is_use = true ORDER by sort ASC  \",\"getAllFeature\":\"SELECT f.id, f.name as feature,f.display_name as display_feature, f.menu_id ,m.name as menu,f.sort, f.create_date, f.create_by, f.update_by, f.update_date, f.is_use FROM \\\\\"feature\\\\\" f left join menu m on f.menu_id = m.id WHERE f.is_use = true ORDER BY m.name\",\"filterFeature\":\"SELECT f.id, f.name as feature,f.display_name as display_feature, f.menu_id ,m.name as menu,f.sort, f.create_date, f.create_by, f.update_by, f.update_date, f.is_use FROM \\\\\"feature\\\\\" f left join menu m on f.menu_id = m.id WHERE f.is_use = true and ($1::text is null or f.name ILIKE \\'%\\' || $1 || \\'%\\') and ($2::uuid is null or f.menu_id = $2)  ORDER BY m.name\",\"getAllFeatureUser\":\"SELECT pf.id, pf.user_id, ft.name as feature , iu.name as name_user, iu.sirname as sirname_user, pf.feature_id ,pf.is_use FROM permission_feature pf Left Join identity_user iu on pf.user_id = iu.id Left Join feature ft on pf.feature_id = ft.id where pf.is_use = true\",\"getAllUser\":\"SELECT id, company_id, admin_id, name, sirname, username, email, password, mobile1, mobile2, detail, is_active, user_profile, token, token_create, token_expired, create_date, is_use, user_profile_name, user_profile_path FROM identity_user where is_use = true\",\"checkMenuSort\":\"SELECT MAX (sort) FROM \\\\\"menu\\\\\"\",\"checkFeature\":\"SELECT MAX (sort) FROM \\\\\"feature\\\\\"\",\"checkFeatureUser\":\"SELECT id, user_id, is_use, feature_id FROM permission_feature where user_id = $1 and feature_id = $2 and is_use = true\",\"checkNameFeature\":\"SELECT id, name, menu_id, sort, create_date, create_by, update_by, update_date, is_use FROM feature where name = $1 AND menu_id = $2\",\"addMenu\":\"INSERT INTO \\\\\"menu\\\\\" (id, name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image, display_name, academy, cover_name, cover_path, cover) VALUES ( $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20)\",\"addFeature\":\"INSERT INTO \\\\\"feature\\\\\" (id, name, menu_id, sort, create_date, create_by, update_by, update_date, is_use,display_name) VALUES ( $1, $2, $3, $4, $5, $6, $7, $8, $9,$10)\",\"addFeatureUser\":\"INSERT INTO \\\\\"permission_feature\\\\\" ( id, user_id, is_use, feature_id) VALUES ($1, $2, $3, $4)\",\"delFeaturePemission\":\"DELETE FROM permission_feature WHERE user_id = $1;\",\"addFeaturePemission\":\"INSERT INTO \\\\\"permission_feature\\\\\" ( id, user_id, is_use, feature_id) VALUES ($1, $2, $3, $4)\",\"updateFeatureUser\":\"UPDATE \\\\\"permission_feature\\\\\" SET user_id= $2, feature_id= $3 WHERE id = $1 and is_use = true\",\"updateFeature\":\"UPDATE \\\\\"feature\\\\\" SET name= $2,display_name=$3, menu_id= $4, update_by= $5, update_date= $6 WHERE id = $1 and is_use = true\",\"updateMenu\":\"UPDATE \\\\\"menu\\\\\" SET name = $2 ,display_name =$3 ,path = $4,update_date = $5, update_by = $6 ,parent_id = $7,icon = $8,image_name = $9,image_path = $10,is_image = $11, academy = $12, cover_name= $13, cover_path= $14, cover= $15 WHERE id = $1 and is_use = true\",\"checkSupMenu\":\"SELECT count(*) FROM \\\\\"menu\\\\\" WHERE parent_id = $1 AND is_use = true \",\"delMenu\":\"UPDATE \\\\\"menu\\\\\" SET is_use = false WHERE id=$1 \",\"delFeature\":\"UPDATE \\\\\"feature\\\\\" SET is_use = false WHERE id=$1 \",\"delFeatureUser\":\"UPDATE \\\\\"permission_feature\\\\\" SET is_use = false WHERE id=$1\",\"filterMenuLv1\":\"SELECT id, name,display_name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image FROM \\\\\"menu\\\\\" WHERE is_use = true and level = 1 and ($1::text is null or name ILIKE \\'%\\' || $1 || \\'%\\')\",\"filterMenuLv2\":\"SELECT id, name,display_name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image FROM \\\\\"menu\\\\\" WHERE is_use = true and parent_id = $2 and level = 2 and ($1::text is null or name ILIKE \\'%\\' || $1 || \\'%\\') \",\"get_level_all\":\"SELECT id, name,display_name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image FROM \\\\\"menu\\\\\" WHERE is_use = true order by sort ASC\",\"get_level_1\":\"SELECT id, name,display_name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image FROM \\\\\"menu\\\\\" WHERE is_use = true AND level = 1 and ($1::text is null or name ILIKE \\'%\\' || $1 || \\'%\\') and ($2::text is null or path ILIKE \\'%\\' || $2 || \\'%\\') order by sort ASC\",\"get_level_2\":\"SELECT id, name,display_name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image FROM \\\\\"menu\\\\\" WHERE is_use = true AND level = 2 and ($1::text is null or name ILIKE \\'%\\' || $1 || \\'%\\') and ($2::text is null or path ILIKE \\'%\\' || $2 || \\'%\\') and ($3::uuid is null or parent_id = $3) order by sort ASC\",\"get_level_3\":\"SELECT id, name,display_name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image FROM \\\\\"menu\\\\\" WHERE is_use = true AND level = 3 and ($1::text is null or name ILIKE \\'%\\' || $1 || \\'%\\') and ($2::text is null or path ILIKE \\'%\\' || $2 || \\'%\\') and ($3::uuid is null or parent_id = $3) order by sort ASC\",\"find_level_Byid\":\"SELECT id, name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image, display_name, academy, cover_name, cover_path, cover FROM \\\\\"menu\\\\\" WHERE is_use = true AND id = $1\",\"find_level_Byid_temp\":\"SELECT id, name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image, display_name, academy, cover_name, cover_path, cover FROM \\\\\"menu\\\\\" WHERE is_use = true AND id = $1\",\"findByFeatureId\":\"SELECT id, name, menu_id, sort, create_date, create_by, update_by, update_date, is_use,display_name FROM feature WHERE id = $1\",\"findByFeatureUserDataId\":\"SELECT id, user_id, is_use, feature_id FROM permission_feature where user_id = $1;\",\"update_level_Byid\":\"UPDATE \\\\\"menu\\\\\" SET name = $2 ,path = $3,parent_id = $4,level = $5 WHERE id = $1\",\"getLevelByLv\":\"SELECT id, name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon FROM menu where is_use =true and parent_id = $1;\",\"delMenuPermission\":\"DELETE FROM permission_menu WHERE user_id = $1;\",\"addMenuPermission\":\"INSERT INTO permission_menu(id, menu_id, is_use, user_id) VALUES ($1, $2, $3, $4);\",\"findMenuPermissionByUserId\":\"SELECT m.name,pm.menu_id, pm.is_use, pm.user_id FROM permission_menu pm left join menu m on pm.menu_id = m.id where pm.user_id = $1;\",\"getMenuByUserId\":\"SELECT a.id, name, path, parent_id, level, created_date, created_by, update_date, update_by, a.is_use, sort, icon, image_name, image_path, is_image, display_name FROM permission_menu b left join menu a on  a.id = b.menu_id WHERE user_id = $1 and a.is_use = true order by sort ASC\",\"getFeatureByUserId\":\"SELECT  user_id,feature_id,f.name as feature,f.display_name as feature_name,m.id as menu_id ,m.name as menu,m.level FROM permission_feature pf left join feature f on pf.feature_id = f.id left join menu m on f.menu_id = m.id WHERE user_id = $1;\",\"getAll_icon\":\"SELECT id, icon, is_use FROM icon where is_use = true\",\"getMenuByLevel\":\"SELECT id, name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image,display_name FROM menu Where is_use = true and level = $1 order by sort ASC\",\"update_sort\":\"UPDATE \\\\\"menu\\\\\" SET  update_date=$1, update_by=$2,  sort=$3 WHERE id = $4;\",\"getOEMByUserID\":\"SELECT u.id as user_id, u.company_id as company_id, u.admin_id, u.name as user_name, sirname, username, email, password, mobile1, mobile2, u.detail as user_detail, u.is_active, user_profile, token, token_create, token_expired, u.create_date, u.is_use, u.user_profile_name, u.user_profile_path,o.id as oem_id, o.company_id oem_comId, o.admin_id, o.name as oem_name, o.logo as oem_logo, o.create_date, o.is_use, o.logo_name as oem_logoName, o.logo_path as oem_logoPath, o.is_active as oem_isActive FROM identity_user u left join company c on c.id = u.company_id left join oem o on o.company_id = c.id where c.is_use = true and u.id = $1 and o.is_active = true; \",\"findOemUserById\":\"SELECT id, user_id, oem_id, is_active FROM permission_oem where user_id = $1;\",\"delOemPermission\":\"DELETE FROM permission_oem WHERE user_id = $1;\",\"addOemPermission\":\"INSERT INTO \\\\\"permission_oem\\\\\" ( id, user_id, oem_id, is_active) VALUES ($1, $2, $3, $4);\",\"academy_getCategoryAll\":\"SELECT id, name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image, display_name, academy, cover_name, cover_path, cover FROM \\\\\"menu\\\\\" where id in (select parent_id from \\\\\"menu\\\\\") and is_use = true order by sort ASC;\",\"academy_getCategory2\":\"SELECT id, name,display_name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon,image_name, image_path, is_image, academy, cover_name, cover_path, cover FROM \\\\\"menu\\\\\" WHERE is_use = true order by sort ASC\",\"academy_getCategory\":\"SELECT id, name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image, display_name, academy, cover_name, cover_path, cover FROM \\\\\"menu\\\\\" where id in (select parent_id from \\\\\"menu\\\\\") and is_use = true and ($1::uuid is null or id = $1) order by sort ASC;\"}');\n\n//# sourceURL=webpack://track-tire-backend/./app/query/queryPermission.json?");

/***/ }),

/***/ "./app/query/querySystem_mgt.json":
/*!****************************************!*\
  !*** ./app/query/querySystem_mgt.json ***!
  \****************************************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse('{\"filterTrailerType\":\"SELECT tbt_id, tbt_name, tbt_sub_name, tbt_is_use, tbt_created_date, tbt_updated_date, tbt_is_active FROM trailer_brand_type where tbt_is_use = true and ($1::text is null or tbt_name ILIKE \\'%\\' || $1 || \\'%\\') and ($2::text is null or tbt_sub_name ILIKE \\'%\\' || $2 || \\'%\\');\",\"checkTrailType\":\"SELECT tbt_id, tbt_name, tbt_sub_name, tbt_is_use, tbt_created_date, tbt_updated_date, tbt_is_active FROM trailer_brand_type where tbt_is_use = true and tbt_name = $1 and tbt_sub_name = $2;\",\"saveTrailerType\":\"INSERT INTO trailer_brand_type(tbt_id, tbt_name, tbt_sub_name, tbt_is_use, tbt_created_date, tbt_updated_date, tbt_is_active) VALUES ($1, $2, $3, $4, $5, $6, $7);\",\"getTrailerTypeByID\":\"SELECT tbt_id, tbt_name, tbt_sub_name, tbt_is_use, tbt_created_date, tbt_updated_date, tbt_is_active FROM trailer_brand_type where tbt_id = $1;\",\"delTrailerTyoe\":\"UPDATE trailer_brand_type SET tbt_is_use = false WHERE tbt_id = $1;\",\"checkTrailTypeUpdate\":\"SELECT tbt_id, tbt_name, tbt_sub_name, tbt_is_use, tbt_created_date, tbt_updated_date, tbt_is_active FROM trailer_brand_type where tbt_is_use = true and tbt_id != $1 and tbt_name = $2 and tbt_sub_name = $3;\",\"updateTrailType\":\"UPDATE trailer_brand_type SET tbt_name=$2, tbt_sub_name=$3, tbt_is_use=$4, tbt_updated_date=$5, tbt_is_active=$6 WHERE tbt_id = $1;\"}');\n\n//# sourceURL=webpack://track-tire-backend/./app/query/querySystem_mgt.json?");

/***/ }),

/***/ "./app/query/queryUser.json":
/*!**********************************!*\
  !*** ./app/query/queryUser.json ***!
  \**********************************/
/***/ ((module) => {

"use strict";
eval("module.exports = {};\n\n//# sourceURL=webpack://track-tire-backend/./app/query/queryUser.json?");

/***/ }),

/***/ "./app/swagger.json":
/*!**************************!*\
  !*** ./app/swagger.json ***!
  \**************************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse('{\"swagger\":\"2.0\",\"info\":{\"version\":\"1.0.0\",\"title\":\"Save Yanng Project\",\"description\":\"Application Programming Interface (API)\"},\"host\":\"localhost:4000\",\"basePath\":\"/\",\"tags\":[{\"name\":\"Init\",\"description\":\"Application Programming Interface (API)\"}],\"paths\":{\"/\":{\"get\":{\"tags\":[\"Init\"],\"description\":\"Start Api\",\"parameters\":[{}],\"responses\":{\"200\":{\"description\":\"OK\"}}}}},\"schemes\":[\"http\"],\"consumes\":[\"application/json\"],\"produces\":[\"application/json\"]}');\n\n//# sourceURL=webpack://track-tire-backend/./app/swagger.json?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./app/bin/www.js");
/******/ 	
/******/ })()
;